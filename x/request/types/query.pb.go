// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dhpc/request/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetAllowedOraclesRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAllowedOraclesRequest) Reset()         { *m = QueryGetAllowedOraclesRequest{} }
func (m *QueryGetAllowedOraclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllowedOraclesRequest) ProtoMessage()    {}
func (*QueryGetAllowedOraclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{2}
}
func (m *QueryGetAllowedOraclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllowedOraclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllowedOraclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllowedOraclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllowedOraclesRequest.Merge(m, src)
}
func (m *QueryGetAllowedOraclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllowedOraclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllowedOraclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllowedOraclesRequest proto.InternalMessageInfo

func (m *QueryGetAllowedOraclesRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAllowedOraclesResponse struct {
	AllowedOracles AllowedOracles `protobuf:"bytes,1,opt,name=AllowedOracles,proto3" json:"AllowedOracles"`
}

func (m *QueryGetAllowedOraclesResponse) Reset()         { *m = QueryGetAllowedOraclesResponse{} }
func (m *QueryGetAllowedOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllowedOraclesResponse) ProtoMessage()    {}
func (*QueryGetAllowedOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{3}
}
func (m *QueryGetAllowedOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllowedOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllowedOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllowedOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllowedOraclesResponse.Merge(m, src)
}
func (m *QueryGetAllowedOraclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllowedOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllowedOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllowedOraclesResponse proto.InternalMessageInfo

func (m *QueryGetAllowedOraclesResponse) GetAllowedOracles() AllowedOracles {
	if m != nil {
		return m.AllowedOracles
	}
	return AllowedOracles{}
}

type QueryAllAllowedOraclesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllowedOraclesRequest) Reset()         { *m = QueryAllAllowedOraclesRequest{} }
func (m *QueryAllAllowedOraclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllowedOraclesRequest) ProtoMessage()    {}
func (*QueryAllAllowedOraclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{4}
}
func (m *QueryAllAllowedOraclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllowedOraclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllowedOraclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllowedOraclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllowedOraclesRequest.Merge(m, src)
}
func (m *QueryAllAllowedOraclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllowedOraclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllowedOraclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllowedOraclesRequest proto.InternalMessageInfo

func (m *QueryAllAllowedOraclesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAllowedOraclesResponse struct {
	AllowedOracles []AllowedOracles    `protobuf:"bytes,1,rep,name=AllowedOracles,proto3" json:"AllowedOracles"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllowedOraclesResponse) Reset()         { *m = QueryAllAllowedOraclesResponse{} }
func (m *QueryAllAllowedOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllowedOraclesResponse) ProtoMessage()    {}
func (*QueryAllAllowedOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{5}
}
func (m *QueryAllAllowedOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllowedOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllowedOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllowedOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllowedOraclesResponse.Merge(m, src)
}
func (m *QueryAllAllowedOraclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllowedOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllowedOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllowedOraclesResponse proto.InternalMessageInfo

func (m *QueryAllAllowedOraclesResponse) GetAllowedOracles() []AllowedOracles {
	if m != nil {
		return m.AllowedOracles
	}
	return nil
}

func (m *QueryAllAllowedOraclesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMinerResponseRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=uUID,proto3" json:"uUID,omitempty"`
}

func (m *QueryGetMinerResponseRequest) Reset()         { *m = QueryGetMinerResponseRequest{} }
func (m *QueryGetMinerResponseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinerResponseRequest) ProtoMessage()    {}
func (*QueryGetMinerResponseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{6}
}
func (m *QueryGetMinerResponseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinerResponseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinerResponseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinerResponseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinerResponseRequest.Merge(m, src)
}
func (m *QueryGetMinerResponseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinerResponseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinerResponseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinerResponseRequest proto.InternalMessageInfo

func (m *QueryGetMinerResponseRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type QueryGetMinerResponseResponse struct {
	MinerResponse MinerResponse `protobuf:"bytes,1,opt,name=minerResponse,proto3" json:"minerResponse"`
}

func (m *QueryGetMinerResponseResponse) Reset()         { *m = QueryGetMinerResponseResponse{} }
func (m *QueryGetMinerResponseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMinerResponseResponse) ProtoMessage()    {}
func (*QueryGetMinerResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{7}
}
func (m *QueryGetMinerResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMinerResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMinerResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMinerResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMinerResponseResponse.Merge(m, src)
}
func (m *QueryGetMinerResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMinerResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMinerResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMinerResponseResponse proto.InternalMessageInfo

func (m *QueryGetMinerResponseResponse) GetMinerResponse() MinerResponse {
	if m != nil {
		return m.MinerResponse
	}
	return MinerResponse{}
}

type QueryAllMinerResponseRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMinerResponseRequest) Reset()         { *m = QueryAllMinerResponseRequest{} }
func (m *QueryAllMinerResponseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMinerResponseRequest) ProtoMessage()    {}
func (*QueryAllMinerResponseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{8}
}
func (m *QueryAllMinerResponseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMinerResponseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMinerResponseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMinerResponseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMinerResponseRequest.Merge(m, src)
}
func (m *QueryAllMinerResponseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMinerResponseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMinerResponseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMinerResponseRequest proto.InternalMessageInfo

func (m *QueryAllMinerResponseRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMinerResponseResponse struct {
	MinerResponse []MinerResponse     `protobuf:"bytes,1,rep,name=minerResponse,proto3" json:"minerResponse"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMinerResponseResponse) Reset()         { *m = QueryAllMinerResponseResponse{} }
func (m *QueryAllMinerResponseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMinerResponseResponse) ProtoMessage()    {}
func (*QueryAllMinerResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{9}
}
func (m *QueryAllMinerResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMinerResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMinerResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMinerResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMinerResponseResponse.Merge(m, src)
}
func (m *QueryAllMinerResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMinerResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMinerResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMinerResponseResponse proto.InternalMessageInfo

func (m *QueryAllMinerResponseResponse) GetMinerResponse() []MinerResponse {
	if m != nil {
		return m.MinerResponse
	}
	return nil
}

func (m *QueryAllMinerResponseResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRequestRecordRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=uUID,proto3" json:"uUID,omitempty"`
}

func (m *QueryGetRequestRecordRequest) Reset()         { *m = QueryGetRequestRecordRequest{} }
func (m *QueryGetRequestRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRequestRecordRequest) ProtoMessage()    {}
func (*QueryGetRequestRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{10}
}
func (m *QueryGetRequestRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRequestRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRequestRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRequestRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRequestRecordRequest.Merge(m, src)
}
func (m *QueryGetRequestRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRequestRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRequestRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRequestRecordRequest proto.InternalMessageInfo

func (m *QueryGetRequestRecordRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type QueryGetRequestRecordResponse struct {
	RequestRecord RequestRecord `protobuf:"bytes,1,opt,name=requestRecord,proto3" json:"requestRecord"`
}

func (m *QueryGetRequestRecordResponse) Reset()         { *m = QueryGetRequestRecordResponse{} }
func (m *QueryGetRequestRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRequestRecordResponse) ProtoMessage()    {}
func (*QueryGetRequestRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{11}
}
func (m *QueryGetRequestRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRequestRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRequestRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRequestRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRequestRecordResponse.Merge(m, src)
}
func (m *QueryGetRequestRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRequestRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRequestRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRequestRecordResponse proto.InternalMessageInfo

func (m *QueryGetRequestRecordResponse) GetRequestRecord() RequestRecord {
	if m != nil {
		return m.RequestRecord
	}
	return RequestRecord{}
}

type QueryAllRequestRecordRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRequestRecordRequest) Reset()         { *m = QueryAllRequestRecordRequest{} }
func (m *QueryAllRequestRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRequestRecordRequest) ProtoMessage()    {}
func (*QueryAllRequestRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{12}
}
func (m *QueryAllRequestRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRequestRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRequestRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRequestRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRequestRecordRequest.Merge(m, src)
}
func (m *QueryAllRequestRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRequestRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRequestRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRequestRecordRequest proto.InternalMessageInfo

func (m *QueryAllRequestRecordRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRequestRecordResponse struct {
	RequestRecord []RequestRecord     `protobuf:"bytes,1,rep,name=requestRecord,proto3" json:"requestRecord"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRequestRecordResponse) Reset()         { *m = QueryAllRequestRecordResponse{} }
func (m *QueryAllRequestRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRequestRecordResponse) ProtoMessage()    {}
func (*QueryAllRequestRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{13}
}
func (m *QueryAllRequestRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRequestRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRequestRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRequestRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRequestRecordResponse.Merge(m, src)
}
func (m *QueryAllRequestRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRequestRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRequestRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRequestRecordResponse proto.InternalMessageInfo

func (m *QueryAllRequestRecordResponse) GetRequestRecord() []RequestRecord {
	if m != nil {
		return m.RequestRecord
	}
	return nil
}

func (m *QueryAllRequestRecordResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTreasuryRequest struct {
}

func (m *QueryGetTreasuryRequest) Reset()         { *m = QueryGetTreasuryRequest{} }
func (m *QueryGetTreasuryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTreasuryRequest) ProtoMessage()    {}
func (*QueryGetTreasuryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{14}
}
func (m *QueryGetTreasuryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTreasuryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTreasuryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTreasuryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTreasuryRequest.Merge(m, src)
}
func (m *QueryGetTreasuryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTreasuryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTreasuryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTreasuryRequest proto.InternalMessageInfo

type QueryGetTreasuryResponse struct {
	Treasury Treasury `protobuf:"bytes,1,opt,name=Treasury,proto3" json:"Treasury"`
}

func (m *QueryGetTreasuryResponse) Reset()         { *m = QueryGetTreasuryResponse{} }
func (m *QueryGetTreasuryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTreasuryResponse) ProtoMessage()    {}
func (*QueryGetTreasuryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ceaaf34e86f4428, []int{15}
}
func (m *QueryGetTreasuryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTreasuryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTreasuryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTreasuryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTreasuryResponse.Merge(m, src)
}
func (m *QueryGetTreasuryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTreasuryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTreasuryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTreasuryResponse proto.InternalMessageInfo

func (m *QueryGetTreasuryResponse) GetTreasury() Treasury {
	if m != nil {
		return m.Treasury
	}
	return Treasury{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "dhpc.request.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dhpc.request.QueryParamsResponse")
	proto.RegisterType((*QueryGetAllowedOraclesRequest)(nil), "dhpc.request.QueryGetAllowedOraclesRequest")
	proto.RegisterType((*QueryGetAllowedOraclesResponse)(nil), "dhpc.request.QueryGetAllowedOraclesResponse")
	proto.RegisterType((*QueryAllAllowedOraclesRequest)(nil), "dhpc.request.QueryAllAllowedOraclesRequest")
	proto.RegisterType((*QueryAllAllowedOraclesResponse)(nil), "dhpc.request.QueryAllAllowedOraclesResponse")
	proto.RegisterType((*QueryGetMinerResponseRequest)(nil), "dhpc.request.QueryGetMinerResponseRequest")
	proto.RegisterType((*QueryGetMinerResponseResponse)(nil), "dhpc.request.QueryGetMinerResponseResponse")
	proto.RegisterType((*QueryAllMinerResponseRequest)(nil), "dhpc.request.QueryAllMinerResponseRequest")
	proto.RegisterType((*QueryAllMinerResponseResponse)(nil), "dhpc.request.QueryAllMinerResponseResponse")
	proto.RegisterType((*QueryGetRequestRecordRequest)(nil), "dhpc.request.QueryGetRequestRecordRequest")
	proto.RegisterType((*QueryGetRequestRecordResponse)(nil), "dhpc.request.QueryGetRequestRecordResponse")
	proto.RegisterType((*QueryAllRequestRecordRequest)(nil), "dhpc.request.QueryAllRequestRecordRequest")
	proto.RegisterType((*QueryAllRequestRecordResponse)(nil), "dhpc.request.QueryAllRequestRecordResponse")
	proto.RegisterType((*QueryGetTreasuryRequest)(nil), "dhpc.request.QueryGetTreasuryRequest")
	proto.RegisterType((*QueryGetTreasuryResponse)(nil), "dhpc.request.QueryGetTreasuryResponse")
}

func init() { proto.RegisterFile("dhpc/request/query.proto", fileDescriptor_2ceaaf34e86f4428) }

var fileDescriptor_2ceaaf34e86f4428 = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xc1, 0x4e, 0x13, 0x5d,
	0x14, 0xc7, 0x3b, 0x85, 0x8f, 0xf0, 0x5d, 0x85, 0xe8, 0xb5, 0xc1, 0x52, 0xca, 0x00, 0x23, 0xa0,
	0x29, 0x66, 0x26, 0xd4, 0x8d, 0xdb, 0x12, 0x22, 0xc1, 0xc4, 0x88, 0x0d, 0x6e, 0xdc, 0x90, 0xa1,
	0xbd, 0x0e, 0x13, 0xa7, 0xbd, 0xc3, 0xcc, 0x54, 0x25, 0x84, 0x8d, 0x4f, 0xa0, 0x31, 0xc6, 0xe7,
	0x70, 0xe1, 0x3b, 0xb0, 0x24, 0x71, 0xe3, 0xca, 0x18, 0xf0, 0x25, 0xdc, 0x99, 0xb9, 0xf7, 0x0c,
	0xed, 0x29, 0x77, 0xca, 0xa4, 0x81, 0x55, 0x9b, 0x9e, 0xff, 0x39, 0xf3, 0xfb, 0x9f, 0x73, 0x7b,
	0xee, 0x90, 0x62, 0x73, 0xcf, 0x6f, 0x58, 0x01, 0xdb, 0xef, 0xb0, 0x30, 0xb2, 0xf6, 0x3b, 0x2c,
	0x38, 0x30, 0xfd, 0x80, 0x47, 0x9c, 0xde, 0x8c, 0x23, 0x26, 0x44, 0x4a, 0x05, 0x87, 0x3b, 0x5c,
	0x04, 0xac, 0xf8, 0x9b, 0xd4, 0x94, 0xca, 0x0e, 0xe7, 0x8e, 0xc7, 0x2c, 0xdb, 0x77, 0x2d, 0xbb,
	0xdd, 0xe6, 0x91, 0x1d, 0xb9, 0xbc, 0x1d, 0x42, 0xb4, 0xd2, 0xe0, 0x61, 0x8b, 0x87, 0xd6, 0xae,
	0x1d, 0x32, 0x59, 0xda, 0x7a, 0xbb, 0xba, 0xcb, 0x22, 0x7b, 0xd5, 0xf2, 0x6d, 0xc7, 0x6d, 0x0b,
	0x31, 0x68, 0xa7, 0x11, 0x87, 0x6f, 0x07, 0x76, 0x2b, 0x29, 0x63, 0xa0, 0x90, 0xed, 0x79, 0xfc,
	0x1d, 0x6b, 0xee, 0xf0, 0xc0, 0x6e, 0x78, 0x2c, 0xd1, 0x2c, 0x20, 0x4d, 0xcb, 0x6d, 0xb3, 0x60,
	0x27, 0x60, 0xa1, 0xcf, 0xdb, 0x21, 0x53, 0x4a, 0xe0, 0x73, 0x27, 0x60, 0x0d, 0x1e, 0x34, 0x41,
	0x32, 0x83, 0x24, 0x51, 0xc0, 0xec, 0xb0, 0x93, 0xf4, 0xc3, 0x28, 0x10, 0xfa, 0x22, 0xf6, 0xb0,
	0x25, 0xd8, 0xea, 0x52, 0x64, 0x6c, 0x92, 0x3b, 0xe8, 0x57, 0xf9, 0x48, 0x5a, 0x25, 0x63, 0xd2,
	0x43, 0x51, 0x9b, 0xd7, 0x1e, 0xdc, 0xa8, 0x16, 0xcc, 0xde, 0x6e, 0x9a, 0x52, 0xbd, 0x36, 0x7a,
	0xfc, 0x6b, 0x2e, 0x57, 0x07, 0xa5, 0x61, 0x91, 0x59, 0x51, 0x6a, 0x83, 0x45, 0x35, 0x69, 0xf2,
	0xb9, 0xf4, 0x08, 0xcf, 0xa2, 0x93, 0x24, 0xef, 0x36, 0x45, 0xc1, 0xd1, 0x7a, 0xde, 0x6d, 0x1a,
	0x1e, 0xd1, 0xd3, 0x12, 0x00, 0xe3, 0x29, 0x99, 0xc4, 0x11, 0xc0, 0x29, 0x63, 0x1c, 0xac, 0x01,
	0xac, 0xbe, 0x4c, 0xc3, 0x01, 0xbc, 0x9a, 0xe7, 0xa9, 0xf1, 0x9e, 0x10, 0xd2, 0x1d, 0x2b, 0x3c,
	0x68, 0xd9, 0x94, 0x67, 0xc0, 0x8c, 0xcf, 0x80, 0x29, 0x8f, 0x17, 0x9c, 0x01, 0x73, 0xcb, 0x76,
	0x18, 0xe4, 0xd6, 0x7b, 0x32, 0x8d, 0xef, 0x1a, 0xf8, 0x52, 0x3c, 0x69, 0x80, 0xaf, 0x91, 0xe1,
	0x7c, 0xd1, 0x0d, 0x84, 0x9d, 0x17, 0xd8, 0xf7, 0x2f, 0xc5, 0x96, 0x20, 0x88, 0xbb, 0x4a, 0xca,
	0xc9, 0x38, 0x9e, 0xc5, 0x07, 0xf0, 0x5c, 0x04, 0xfd, 0xa1, 0x64, 0xb4, 0xf3, 0x72, 0x73, 0x5d,
	0x74, 0xe6, 0xff, 0xba, 0xf8, 0x6e, 0xec, 0x75, 0x67, 0xde, 0x97, 0x03, 0x4e, 0x37, 0xc8, 0x44,
	0xab, 0x37, 0x00, 0x7d, 0x9d, 0xc1, 0x46, 0x51, 0x2e, 0xf8, 0xc4, 0x79, 0xc6, 0x6b, 0xa0, 0xab,
	0x79, 0x9e, 0x92, 0xee, 0xaa, 0xa6, 0xf7, 0x4d, 0xeb, 0x9e, 0x93, 0xcc, 0x96, 0x46, 0x86, 0xb1,
	0x74, 0x2d, 0x93, 0x4b, 0x2c, 0x89, 0xb5, 0x90, 0x71, 0x72, 0x7d, 0x39, 0x5d, 0x9b, 0x41, 0x6f,
	0x40, 0x3d, 0x39, 0x94, 0x9b, 0xd8, 0x44, 0x79, 0xbd, 0x93, 0x53, 0xd2, 0x5d, 0xc7, 0xe4, 0x32,
	0x5b, 0x1a, 0x19, 0xc6, 0xd2, 0xd5, 0x4d, 0x6e, 0x9a, 0xdc, 0x4d, 0xa6, 0xb0, 0x0d, 0xeb, 0x3a,
	0xd9, 0xcc, 0xdb, 0xa4, 0x78, 0x31, 0x04, 0x46, 0x1e, 0x93, 0xf1, 0xe4, 0x37, 0x68, 0xd8, 0x14,
	0xf6, 0x90, 0x44, 0x01, 0xff, 0x5c, 0x5d, 0xfd, 0x3b, 0x4e, 0xfe, 0x13, 0x65, 0xe9, 0x1b, 0x32,
	0x26, 0xd7, 0x38, 0x9d, 0xc7, 0xb9, 0x17, 0x6f, 0x89, 0xd2, 0xc2, 0x00, 0x05, 0xfc, 0x3f, 0xcb,
	0x1f, 0x7e, 0xfc, 0xf9, 0x9c, 0x9f, 0xa2, 0x05, 0x6b, 0xfd, 0xe2, 0x4d, 0x48, 0xbf, 0x6a, 0xfd,
	0x1b, 0x8f, 0xae, 0x28, 0x6a, 0xa6, 0x5d, 0x1d, 0xa5, 0x87, 0xd9, 0xc4, 0xc0, 0x52, 0x11, 0x2c,
	0x8b, 0xd4, 0xc0, 0x2c, 0x7d, 0x57, 0xaf, 0x75, 0xe8, 0x36, 0x8f, 0xe8, 0x17, 0x8d, 0xdc, 0xc6,
	0x65, 0x6a, 0x9e, 0xa7, 0x84, 0x4b, 0xbb, 0x38, 0x94, 0x70, 0xa9, 0xbb, 0xdf, 0x58, 0x12, 0x70,
	0x73, 0x74, 0x76, 0x20, 0x5c, 0xcc, 0x35, 0x81, 0x76, 0x08, 0xad, 0xa8, 0x7b, 0xa0, 0xda, 0x86,
	0xa5, 0x95, 0x4c, 0x5a, 0x20, 0x5a, 0x11, 0x44, 0x4b, 0xf4, 0x1e, 0x26, 0xc2, 0x6f, 0x21, 0xd6,
	0x61, 0xbc, 0x36, 0x8e, 0xe8, 0x27, 0x8d, 0xdc, 0x42, 0x65, 0xe2, 0x76, 0x55, 0xd4, 0x1d, 0xc8,
	0x8c, 0x96, 0xb6, 0x6b, 0x8d, 0x45, 0x81, 0xa6, 0xd3, 0xf2, 0x20, 0x34, 0xd1, 0x2b, 0xf4, 0xaf,
	0x4d, 0xeb, 0x95, 0x6a, 0xff, 0xa4, 0xf5, 0x4a, 0xb9, 0x42, 0xd2, 0x7a, 0x85, 0x5f, 0xc7, 0x7a,
	0x7b, 0x85, 0xca, 0x0c, 0xe8, 0x55, 0x66, 0xb4, 0xb4, 0xed, 0x96, 0xd6, 0x2b, 0x8c, 0x46, 0x0f,
	0xba, 0xab, 0x83, 0x2e, 0xa9, 0x9d, 0xf7, 0x6d, 0xa2, 0xd2, 0xf2, 0x65, 0x32, 0x00, 0xd0, 0x05,
	0x40, 0x91, 0x4e, 0x61, 0x80, 0xe4, 0x3d, 0x74, 0xcd, 0x3c, 0x3e, 0xd5, 0xb5, 0x93, 0x53, 0x5d,
	0xfb, 0x7d, 0xaa, 0x6b, 0x1f, 0xcf, 0xf4, 0xdc, 0xc9, 0x99, 0x9e, 0xfb, 0x79, 0xa6, 0xe7, 0x5e,
	0x15, 0x44, 0xc2, 0xfb, 0x6e, 0xca, 0x81, 0xcf, 0xc2, 0xdd, 0x31, 0xf1, 0xe2, 0xfa, 0xe8, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0xd3, 0x5a, 0x92, 0xe4, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of AllowedOracles items.
	AllowedOracles(ctx context.Context, in *QueryGetAllowedOraclesRequest, opts ...grpc.CallOption) (*QueryGetAllowedOraclesResponse, error)
	AllowedOraclesAll(ctx context.Context, in *QueryAllAllowedOraclesRequest, opts ...grpc.CallOption) (*QueryAllAllowedOraclesResponse, error)
	// Queries a list of MinerResponse items.
	MinerResponse(ctx context.Context, in *QueryGetMinerResponseRequest, opts ...grpc.CallOption) (*QueryGetMinerResponseResponse, error)
	MinerResponseAll(ctx context.Context, in *QueryAllMinerResponseRequest, opts ...grpc.CallOption) (*QueryAllMinerResponseResponse, error)
	// Queries a list of RequestRecord items.
	RequestRecord(ctx context.Context, in *QueryGetRequestRecordRequest, opts ...grpc.CallOption) (*QueryGetRequestRecordResponse, error)
	RequestRecordAll(ctx context.Context, in *QueryAllRequestRecordRequest, opts ...grpc.CallOption) (*QueryAllRequestRecordResponse, error)
	// Queries a Treasury by index.
	Treasury(ctx context.Context, in *QueryGetTreasuryRequest, opts ...grpc.CallOption) (*QueryGetTreasuryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dhpc.request.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedOracles(ctx context.Context, in *QueryGetAllowedOraclesRequest, opts ...grpc.CallOption) (*QueryGetAllowedOraclesResponse, error) {
	out := new(QueryGetAllowedOraclesResponse)
	err := c.cc.Invoke(ctx, "/dhpc.request.Query/AllowedOracles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedOraclesAll(ctx context.Context, in *QueryAllAllowedOraclesRequest, opts ...grpc.CallOption) (*QueryAllAllowedOraclesResponse, error) {
	out := new(QueryAllAllowedOraclesResponse)
	err := c.cc.Invoke(ctx, "/dhpc.request.Query/AllowedOraclesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinerResponse(ctx context.Context, in *QueryGetMinerResponseRequest, opts ...grpc.CallOption) (*QueryGetMinerResponseResponse, error) {
	out := new(QueryGetMinerResponseResponse)
	err := c.cc.Invoke(ctx, "/dhpc.request.Query/MinerResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MinerResponseAll(ctx context.Context, in *QueryAllMinerResponseRequest, opts ...grpc.CallOption) (*QueryAllMinerResponseResponse, error) {
	out := new(QueryAllMinerResponseResponse)
	err := c.cc.Invoke(ctx, "/dhpc.request.Query/MinerResponseAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RequestRecord(ctx context.Context, in *QueryGetRequestRecordRequest, opts ...grpc.CallOption) (*QueryGetRequestRecordResponse, error) {
	out := new(QueryGetRequestRecordResponse)
	err := c.cc.Invoke(ctx, "/dhpc.request.Query/RequestRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RequestRecordAll(ctx context.Context, in *QueryAllRequestRecordRequest, opts ...grpc.CallOption) (*QueryAllRequestRecordResponse, error) {
	out := new(QueryAllRequestRecordResponse)
	err := c.cc.Invoke(ctx, "/dhpc.request.Query/RequestRecordAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Treasury(ctx context.Context, in *QueryGetTreasuryRequest, opts ...grpc.CallOption) (*QueryGetTreasuryResponse, error) {
	out := new(QueryGetTreasuryResponse)
	err := c.cc.Invoke(ctx, "/dhpc.request.Query/Treasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of AllowedOracles items.
	AllowedOracles(context.Context, *QueryGetAllowedOraclesRequest) (*QueryGetAllowedOraclesResponse, error)
	AllowedOraclesAll(context.Context, *QueryAllAllowedOraclesRequest) (*QueryAllAllowedOraclesResponse, error)
	// Queries a list of MinerResponse items.
	MinerResponse(context.Context, *QueryGetMinerResponseRequest) (*QueryGetMinerResponseResponse, error)
	MinerResponseAll(context.Context, *QueryAllMinerResponseRequest) (*QueryAllMinerResponseResponse, error)
	// Queries a list of RequestRecord items.
	RequestRecord(context.Context, *QueryGetRequestRecordRequest) (*QueryGetRequestRecordResponse, error)
	RequestRecordAll(context.Context, *QueryAllRequestRecordRequest) (*QueryAllRequestRecordResponse, error)
	// Queries a Treasury by index.
	Treasury(context.Context, *QueryGetTreasuryRequest) (*QueryGetTreasuryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AllowedOracles(ctx context.Context, req *QueryGetAllowedOraclesRequest) (*QueryGetAllowedOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedOracles not implemented")
}
func (*UnimplementedQueryServer) AllowedOraclesAll(ctx context.Context, req *QueryAllAllowedOraclesRequest) (*QueryAllAllowedOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedOraclesAll not implemented")
}
func (*UnimplementedQueryServer) MinerResponse(ctx context.Context, req *QueryGetMinerResponseRequest) (*QueryGetMinerResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinerResponse not implemented")
}
func (*UnimplementedQueryServer) MinerResponseAll(ctx context.Context, req *QueryAllMinerResponseRequest) (*QueryAllMinerResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinerResponseAll not implemented")
}
func (*UnimplementedQueryServer) RequestRecord(ctx context.Context, req *QueryGetRequestRecordRequest) (*QueryGetRequestRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRecord not implemented")
}
func (*UnimplementedQueryServer) RequestRecordAll(ctx context.Context, req *QueryAllRequestRecordRequest) (*QueryAllRequestRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRecordAll not implemented")
}
func (*UnimplementedQueryServer) Treasury(ctx context.Context, req *QueryGetTreasuryRequest) (*QueryGetTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Treasury not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhpc.request.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedOracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllowedOraclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedOracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhpc.request.Query/AllowedOracles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedOracles(ctx, req.(*QueryGetAllowedOraclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedOraclesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAllowedOraclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedOraclesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhpc.request.Query/AllowedOraclesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedOraclesAll(ctx, req.(*QueryAllAllowedOraclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinerResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMinerResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinerResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhpc.request.Query/MinerResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinerResponse(ctx, req.(*QueryGetMinerResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MinerResponseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMinerResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MinerResponseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhpc.request.Query/MinerResponseAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MinerResponseAll(ctx, req.(*QueryAllMinerResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RequestRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRequestRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhpc.request.Query/RequestRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestRecord(ctx, req.(*QueryGetRequestRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RequestRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRequestRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RequestRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhpc.request.Query/RequestRecordAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RequestRecordAll(ctx, req.(*QueryAllRequestRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Treasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Treasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dhpc.request.Query/Treasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Treasury(ctx, req.(*QueryGetTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dhpc.request.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AllowedOracles",
			Handler:    _Query_AllowedOracles_Handler,
		},
		{
			MethodName: "AllowedOraclesAll",
			Handler:    _Query_AllowedOraclesAll_Handler,
		},
		{
			MethodName: "MinerResponse",
			Handler:    _Query_MinerResponse_Handler,
		},
		{
			MethodName: "MinerResponseAll",
			Handler:    _Query_MinerResponseAll_Handler,
		},
		{
			MethodName: "RequestRecord",
			Handler:    _Query_RequestRecord_Handler,
		},
		{
			MethodName: "RequestRecordAll",
			Handler:    _Query_RequestRecordAll_Handler,
		},
		{
			MethodName: "Treasury",
			Handler:    _Query_Treasury_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhpc/request/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllowedOraclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllowedOraclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllowedOraclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllowedOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllowedOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllowedOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AllowedOracles.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAllowedOraclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllowedOraclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllowedOraclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllowedOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllowedOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllowedOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllowedOracles) > 0 {
		for iNdEx := len(m.AllowedOracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedOracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMinerResponseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinerResponseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinerResponseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMinerResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMinerResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMinerResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinerResponse.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMinerResponseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMinerResponseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMinerResponseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMinerResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMinerResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMinerResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinerResponse) > 0 {
		for iNdEx := len(m.MinerResponse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinerResponse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRequestRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRequestRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRequestRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRequestRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRequestRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRequestRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RequestRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRequestRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRequestRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRequestRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRequestRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRequestRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRequestRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestRecord) > 0 {
		for iNdEx := len(m.RequestRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTreasuryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTreasuryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTreasuryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTreasuryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTreasuryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTreasuryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Treasury.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllowedOraclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAllowedOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AllowedOracles.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAllowedOraclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllowedOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedOracles) > 0 {
		for _, e := range m.AllowedOracles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMinerResponseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMinerResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinerResponse.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMinerResponseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMinerResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MinerResponse) > 0 {
		for _, e := range m.MinerResponse {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRequestRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRequestRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RequestRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRequestRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRequestRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestRecord) > 0 {
		for _, e := range m.RequestRecord {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTreasuryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTreasuryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Treasury.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllowedOraclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllowedOraclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllowedOraclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllowedOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllowedOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllowedOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedOracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AllowedOracles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllowedOraclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllowedOraclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllowedOraclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllowedOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllowedOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllowedOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedOracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedOracles = append(m.AllowedOracles, AllowedOracles{})
			if err := m.AllowedOracles[len(m.AllowedOracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinerResponseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinerResponseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinerResponseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMinerResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMinerResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMinerResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinerResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinerResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMinerResponseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMinerResponseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMinerResponseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMinerResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMinerResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMinerResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinerResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinerResponse = append(m.MinerResponse, MinerResponse{})
			if err := m.MinerResponse[len(m.MinerResponse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRequestRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRequestRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRequestRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRequestRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRequestRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRequestRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRequestRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRequestRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRequestRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRequestRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRequestRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRequestRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestRecord = append(m.RequestRecord, RequestRecord{})
			if err := m.RequestRecord[len(m.RequestRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTreasuryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTreasuryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTreasuryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTreasuryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTreasuryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTreasuryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treasury", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Treasury.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
