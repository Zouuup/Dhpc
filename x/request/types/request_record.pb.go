// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: decent/request/request_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequestRecord struct {
	UUID    string           `protobuf:"bytes,1,opt,name=uUID,proto3" json:"uUID,omitempty"`
	TXhash  string           `protobuf:"bytes,2,opt,name=tXhash,proto3" json:"tXhash,omitempty"`
	Network string           `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	From    string           `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Address string           `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Score   int32            `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	Oracle  string           `protobuf:"bytes,7,opt,name=oracle,proto3" json:"oracle,omitempty"`
	Block   int32            `protobuf:"varint,8,opt,name=block,proto3" json:"block,omitempty"`
	Stage   int32            `protobuf:"varint,9,opt,name=stage,proto3" json:"stage,omitempty"`
	Miners  []*MinerResponse `protobuf:"bytes,10,rep,name=miners,proto3" json:"miners,omitempty"`
	Creator string           `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *RequestRecord) Reset()         { *m = RequestRecord{} }
func (m *RequestRecord) String() string { return proto.CompactTextString(m) }
func (*RequestRecord) ProtoMessage()    {}
func (*RequestRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dd4093d0ee40417, []int{0}
}
func (m *RequestRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRecord.Merge(m, src)
}
func (m *RequestRecord) XXX_Size() int {
	return m.Size()
}
func (m *RequestRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRecord proto.InternalMessageInfo

func (m *RequestRecord) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RequestRecord) GetTXhash() string {
	if m != nil {
		return m.TXhash
	}
	return ""
}

func (m *RequestRecord) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *RequestRecord) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RequestRecord) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RequestRecord) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RequestRecord) GetOracle() string {
	if m != nil {
		return m.Oracle
	}
	return ""
}

func (m *RequestRecord) GetBlock() int32 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *RequestRecord) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *RequestRecord) GetMiners() []*MinerResponse {
	if m != nil {
		return m.Miners
	}
	return nil
}

func (m *RequestRecord) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestRecord)(nil), "decent.request.RequestRecord")
}

func init() {
	proto.RegisterFile("decent/request/request_record.proto", fileDescriptor_5dd4093d0ee40417)
}

var fileDescriptor_5dd4093d0ee40417 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4d, 0x4a, 0x3b, 0x41,
	0x10, 0xc5, 0xd3, 0xf9, 0x98, 0xfc, 0xd3, 0xe1, 0xef, 0xa2, 0x91, 0x50, 0x08, 0x36, 0x41, 0x37,
	0x59, 0x8d, 0xa2, 0x78, 0x01, 0xc9, 0xc6, 0x85, 0x9b, 0x06, 0x41, 0xdc, 0x84, 0x49, 0x4f, 0x69,
	0x24, 0xc9, 0x74, 0xac, 0xee, 0xa0, 0xde, 0xc2, 0x93, 0x78, 0x0e, 0x97, 0x59, 0xba, 0x94, 0xcc,
	0x45, 0xa4, 0x3f, 0x0c, 0xe8, 0x6a, 0xea, 0x37, 0xf5, 0xea, 0x55, 0xf5, 0xe3, 0xc7, 0x25, 0x6a,
	0xac, 0xdc, 0x09, 0xe1, 0xd3, 0x1a, 0xed, 0xee, 0x3b, 0x21, 0xd4, 0x86, 0xca, 0x7c, 0x45, 0xc6,
	0x19, 0xb1, 0x17, 0x45, 0x79, 0x6a, 0x1e, 0xfc, 0x1d, 0x5a, 0x3e, 0x56, 0x48, 0x13, 0x42, 0xbb,
	0x32, 0x95, 0xc5, 0x38, 0x74, 0xf4, 0xde, 0xe4, 0xff, 0x55, 0x14, 0xa8, 0x60, 0x26, 0x04, 0x6f,
	0xaf, 0x6f, 0xae, 0xc6, 0xc0, 0x86, 0x6c, 0xd4, 0x53, 0xa1, 0x16, 0x03, 0x9e, 0xb9, 0xdb, 0x59,
	0x61, 0x67, 0xd0, 0x0c, 0x7f, 0x13, 0x09, 0xe0, 0xdd, 0x0a, 0xdd, 0xb3, 0xa1, 0x39, 0xb4, 0x42,
	0xe3, 0x07, 0xbd, 0xcb, 0x3d, 0x99, 0x25, 0xb4, 0xa3, 0x8b, 0xaf, 0xbd, 0xba, 0x28, 0x4b, 0x42,
	0x6b, 0xa1, 0x13, 0xd5, 0x09, 0xc5, 0x3e, 0xef, 0x58, 0x6d, 0x08, 0x21, 0x1b, 0xb2, 0x51, 0x47,
	0x45, 0xf0, 0x5b, 0x0d, 0x15, 0x7a, 0x81, 0xd0, 0x8d, 0x5b, 0x23, 0x79, 0xf5, 0x74, 0x61, 0xf4,
	0x1c, 0xfe, 0x45, 0x75, 0x80, 0xe0, 0xe1, 0x8a, 0x07, 0x84, 0x5e, 0xf2, 0xf0, 0x20, 0x2e, 0x78,
	0x16, 0xde, 0x6d, 0x81, 0x0f, 0x5b, 0xa3, 0xfe, 0xd9, 0x61, 0xfe, 0x3b, 0xa5, 0xfc, 0xda, 0x77,
	0x55, 0x0a, 0x45, 0x25, 0xb1, 0x3f, 0x55, 0x13, 0x16, 0xce, 0x10, 0xf4, 0xe3, 0xa9, 0x09, 0x2f,
	0x4f, 0x3f, 0xb6, 0x92, 0x6d, 0xb6, 0x92, 0x7d, 0x6d, 0x25, 0x7b, 0xab, 0x65, 0x63, 0x53, 0xcb,
	0xc6, 0x67, 0x2d, 0x1b, 0x77, 0x83, 0x71, 0xcc, 0xfb, 0x65, 0x97, 0xb8, 0x7b, 0x5d, 0xa1, 0x9d,
	0x66, 0x21, 0xe9, 0xf3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x92, 0xb1, 0x48, 0xc5, 0x01,
	0x00, 0x00,
}

func (m *RequestRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRequestRecord(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Miners) > 0 {
		for iNdEx := len(m.Miners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Miners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestRecord(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Stage != 0 {
		i = encodeVarintRequestRecord(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x48
	}
	if m.Block != 0 {
		i = encodeVarintRequestRecord(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Oracle) > 0 {
		i -= len(m.Oracle)
		copy(dAtA[i:], m.Oracle)
		i = encodeVarintRequestRecord(dAtA, i, uint64(len(m.Oracle)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Score != 0 {
		i = encodeVarintRequestRecord(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRequestRecord(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintRequestRecord(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintRequestRecord(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TXhash) > 0 {
		i -= len(m.TXhash)
		copy(dAtA[i:], m.TXhash)
		i = encodeVarintRequestRecord(dAtA, i, uint64(len(m.TXhash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintRequestRecord(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovRequestRecord(uint64(l))
	}
	l = len(m.TXhash)
	if l > 0 {
		n += 1 + l + sovRequestRecord(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovRequestRecord(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovRequestRecord(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRequestRecord(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovRequestRecord(uint64(m.Score))
	}
	l = len(m.Oracle)
	if l > 0 {
		n += 1 + l + sovRequestRecord(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovRequestRecord(uint64(m.Block))
	}
	if m.Stage != 0 {
		n += 1 + sovRequestRecord(uint64(m.Stage))
	}
	if len(m.Miners) > 0 {
		for _, e := range m.Miners {
			l = e.Size()
			n += 1 + l + sovRequestRecord(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRequestRecord(uint64(l))
	}
	return n
}

func sovRequestRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestRecord(x uint64) (n int) {
	return sovRequestRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TXhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TXhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Miners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Miners = append(m.Miners, &MinerResponse{})
			if err := m.Miners[len(m.Miners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequestRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequestRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequestRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequestRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequestRecord = fmt.Errorf("proto: unexpected end of group")
)
